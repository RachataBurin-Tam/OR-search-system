import streamlit as st
import pandas as pd
import numpy as np
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
import warnings
import re
warnings.filterwarnings('ignore')

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.set_page_config(
    page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OR",
    page_icon="üíß",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Theme ‡∏™‡∏µ OR
st.markdown("""
<style>
    /* Minimal color scheme */
    :root {
        --or-blue: #5BA4CF;
        --or-navy: #3A4D6A;
        --or-light: #E8F4F8;
        --text-primary: #2C3E50;
        --text-secondary: #6C757D;
    }
    
    /* Header ‡πÅ‡∏•‡∏∞ Title */
    .main h1 {
        color: var(--text-primary) !important;
        font-weight: 600 !important;
    }
    
    .main h2, .main h3 {
        color: var(--text-primary) !important;
        font-weight: 500 !important;
    }
    
    /* Buttons - minimal style */
    .stButton>button {
        background-color: #5BA4CF !important;
        color: white !important;
        border: none !important;
        border-radius: 6px !important;
        font-weight: 500 !important;
        transition: all 0.2s ease !important;
    }
    
    .stButton>button:hover {
        background-color: #4A90BA !important;
        box-shadow: 0 2px 8px rgba(91, 164, 207, 0.2) !important;
    }
    
    .stButton>button[kind="primary"] {
        background-color: #5BA4CF !important;
        font-size: 16px !important;
        padding: 10px 24px !important;
    }
    
    /* Download Buttons */
    .stDownloadButton>button {
        background-color: #6C757D !important;
        color: white !important;
        border-radius: 6px !important;
    }
    
    .stDownloadButton>button:hover {
        background-color: #5A6268 !important;
    }
    
    /* Sidebar - minimal */
    [data-testid="stSidebar"] {
        background-color: #F8F9FA;
    }
    
    [data-testid="stSidebar"] h1, 
    [data-testid="stSidebar"] h2,
    [data-testid="stSidebar"] h3 {
        color: var(--text-primary) !important;
    }
    
    /* Metrics */
    [data-testid="stMetricValue"] {
        color: var(--text-primary) !important;
        font-weight: 600 !important;
    }
    
    /* Sliders - subtle */
    .stSlider [data-baseweb="slider"] [role="slider"] {
        background-color: #5BA4CF !important;
    }
    
    .stSlider [data-baseweb="slider"] {
        background-color: rgba(91, 164, 207, 0.2) !important;
    }
    
    /* Text Input - minimal */
    .stTextInput>div>div>input {
        border: 1px solid #DEE2E6 !important;
        border-radius: 6px !important;
    }
    
    .stTextInput>div>div>input:focus {
        border-color: #5BA4CF !important;
        box-shadow: 0 0 0 0.15rem rgba(91, 164, 207, 0.15) !important;
    }
    
    /* Info boxes - minimal */
    .stInfo {
        background-color: rgba(232, 244, 248, 0.5) !important;
        border-left: 3px solid #5BA4CF !important;
    }
    
    /* Success boxes */
    .stSuccess {
        background-color: rgba(212, 237, 218, 0.5) !important;
        border-left: 3px solid #28A745 !important;
    }
    
    /* Warning boxes */
    .stWarning {
        background-color: rgba(255, 243, 205, 0.5) !important;
        border-left: 3px solid #FFC107 !important;
    }
    
    /* DataFrame - subtle border */
    .stDataFrame {
        border: 1px solid #DEE2E6 !important;
        border-radius: 6px !important;
    }
    
    /* Expander - clean */
    .streamlit-expanderHeader {
        background-color: rgba(248, 249, 250, 0.8) !important;
        border-radius: 6px !important;
        color: var(--text-primary) !important;
        font-weight: 500 !important;
    }
    
    /* Progress bar */
    .stProgress > div > div > div > div {
        background-color: #5BA4CF !important;
    }
    
    /* File uploader - minimal */
    [data-testid="stFileUploader"] {
        border: 2px dashed #DEE2E6 !important;
        border-radius: 8px !important;
        background-color: rgba(248, 249, 250, 0.5) !important;
    }
    
    /* Logo Container */
    .logo-container {
        text-align: center;
        padding: 15px 0;
        margin-bottom: 15px;
    }
    
    .logo-container img {
        max-width: 180px;
        height: auto;
    }
    
    /* Header - minimal gradient */
    .header-gradient {
        background: linear-gradient(135deg, #F8F9FA 0%, #E8F4F8 100%);
        padding: 25px;
        border-radius: 8px;
        border-left: 4px solid #5BA4CF;
        margin-bottom: 30px;
    }
    
    .header-gradient h1 {
        color: var(--text-primary) !important;
        margin: 0;
        font-size: 2rem;
        font-weight: 600;
    }
    
    .header-gradient p {
        color: var(--text-secondary);
        margin: 8px 0 0 0;
        font-size: 0.95rem;
    }
</style>
""", unsafe_allow_html=True)

# ‡πÇ‡∏´‡∏•‡∏î model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö embedding (‡πÉ‡∏ä‡πâ PyTorch backend)
@st.cache_resource
def load_model():
    """‡πÇ‡∏´‡∏•‡∏î model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö word embedding - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"""
    try:
        model = SentenceTransformer('paraphrase-multilingual-MiniLM-L12-v2')
        return model
    except:
        try:
            model = SentenceTransformer('all-MiniLM-L6-v2')
            return model
        except:
            return None

# ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á Excel ‡πÅ‡∏•‡∏∞ CSV)
@st.cache_data
def load_and_prepare_data(uploaded_file):
    """‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡∏´‡∏£‡∏∑‡∏≠ CSV ‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏° text columns"""
    try:
        file_extension = uploaded_file.name.split('.')[-1].lower()
        
        if file_extension == 'csv':
            encodings = ['utf-8', 'utf-8-sig', 'tis-620', 'cp874', 'iso-8859-11']
            df = None
            
            for encoding in encodings:
                try:
                    df = pd.read_csv(uploaded_file, encoding=encoding)
                    break
                except:
                    continue
            
            if df is None:
                st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡πÑ‡∏î‡πâ")
                return None, None
                
        elif file_extension in ['xlsx', 'xls']:
            df = pd.read_excel(uploaded_file, engine='openpyxl' if file_extension == 'xlsx' else None)
        else:
            st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• .{file_extension}")
            return None, None
        
        text_columns = ['Material description', 'Short text', 'Content', 'Contract Content']
        available_cols = [col for col in text_columns if col in df.columns]
        
        if not available_cols:
            available_cols = df.select_dtypes(include=['object', 'string']).columns.tolist()
        
        if not available_cols:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö text columns ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå")
            return None, None
        
        df['combined_text'] = df[available_cols].fillna('').astype(str).agg(' '.join, axis=1)
        df = df[df['combined_text'].str.strip() != '']
        
        if len(df) == 0:
            st.error("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î")
            return None, None
        
        return df, df['combined_text'].tolist()
    
    except Exception as e:
        st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏î‡πâ: {str(e)}")
        return None, None

# ‡∏™‡∏£‡πâ‡∏≤‡∏á embeddings ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
@st.cache_data
def create_embeddings(_model, texts):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á embeddings ‡∏à‡∏≤‡∏Å text list"""
    try:
        embeddings = _model.encode(
            texts, 
            show_progress_bar=False,
            convert_to_numpy=True,
            batch_size=32
        )
        return embeddings
    except Exception as e:
        st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á embeddings ‡πÑ‡∏î‡πâ: {str(e)}")
        return None

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô keyword matching
def calculate_keyword_score(query, text):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ keyword"""
    query_lower = query.lower()
    text_lower = text.lower()
    keywords = query_lower.split()
    
    if not keywords:
        return 0.0
    
    matched_keywords = sum(1 for keyword in keywords if keyword in text_lower)
    keyword_match_ratio = matched_keywords / len(keywords)
    total_occurrences = sum(text_lower.count(keyword) for keyword in keywords)
    frequency_score = min(1.0, np.log1p(total_occurrences) / 5)
    final_score = (keyword_match_ratio * 0.7) + (frequency_score * 0.3)
    
    return final_score

# ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏ú‡∏™‡∏°: Cosine Similarity + Keyword Search
def hybrid_search(query, model, data_embeddings, df, texts, threshold=0.5, 
                  cosine_weight=0.5, keyword_weight=0.5):
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏ú‡∏™‡∏°‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á cosine similarity ‡πÅ‡∏•‡∏∞ keyword matching"""
    try:
        query_embedding = model.encode([query], convert_to_numpy=True)
        cosine_scores = cosine_similarity(query_embedding, data_embeddings)[0]
        keyword_scores = np.array([calculate_keyword_score(query, text) for text in texts])
        hybrid_scores = (cosine_scores * cosine_weight) + (keyword_scores * keyword_weight)
        
        df_result = df.copy()
        df_result['cosine_score'] = cosine_scores
        df_result['keyword_score'] = keyword_scores
        df_result['hybrid_score'] = hybrid_scores
        df_result = df_result[df_result['hybrid_score'] > threshold]
        df_result = df_result.sort_values('hybrid_score', ascending=False)
        
        return df_result
    except Exception as e:
        st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {str(e)}")
        return pd.DataFrame()

# UI ‡∏´‡∏•‡∏±‡∏Å
def main():
    # Sidebar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    with st.sidebar:
        # ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÉ‡∏ô Sidebar
        st.markdown("""
        <div class="logo-container">
            <img src="https://i.imgur.com/YOUR_LOGO_URL.png" alt="OR Logo" style="max-width: 180px;">
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("---")
        st.header("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
        
        uploaded_file = st.file_uploader(
            "‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", 
            type=['xlsx', 'xls', 'csv'],
            help="‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå: Excel (.xlsx, .xls) ‡πÅ‡∏•‡∏∞ CSV (.csv)"
        )
        
        st.markdown("---")
        st.subheader("üéöÔ∏è ‡∏õ‡∏£‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
        
        cosine_weight = st.slider(
            "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Semantic Search (AI)",
            min_value=0.0,
            max_value=1.0,
            value=0.5,
            step=0.1,
            help="‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢"
        )
        
        keyword_weight = 1.0 - cosine_weight
        st.info(f"üî§ ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å Keyword Search: **{keyword_weight:.1f}**")
        
        st.markdown("---")
        
        threshold = st.slider(
            "‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥", 
            min_value=0.0, 
            max_value=1.0, 
            value=0.3,
            step=0.05,
            help="‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ"
        )
        
        st.markdown("---")
        st.info("""
        üí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:**
        
        **Semantic Search (AI):**
        - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢
        - ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏û‡πâ‡∏≠‡∏á ‡∏Ñ‡∏≥‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢
        
        **Keyword Search:**
        - ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏£‡∏á‡πÜ
        - ‡πÄ‡∏£‡πá‡∏ß‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
        
        **‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** ‡πÉ‡∏ä‡πâ 50-50 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        """)
    
    # # Header ‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÇ‡∏•‡πÇ‡∏Å‡πâ
    # col_logo, col_title = st.columns([1, 4])
    
    # with col_logo:
    #     # ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
    #     st.markdown("""
    #     <div style="text-align: center; padding: 10px;">
    #         <img src="https://i.imgur.com/YOUR_LOGO_URL.png" alt="OR Logo" style="max-width: 120px; height: auto;">
    #     </div>
    #     """, unsafe_allow_html=True)
    
    # with col_title:
    #     st.markdown("""
    #     <div class="header-gradient">
    #         <h1>üîç ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ AI</h1>
    #         <p>Hybrid Search: Semantic Search (AI) + Keyword Matching</p>
    #     </div>
    #     """, unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if uploaded_file is not None:
        try:
            # ‡πÇ‡∏´‡∏•‡∏î model
            with st.spinner("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î AI model..."):
                model = load_model()
            
            if model is None:
                st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î model ‡πÑ‡∏î‡πâ")
                return
            
            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            with st.spinner("üìÇ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
                df, combined_texts = load_and_prepare_data(uploaded_file)
                
                if df is None or combined_texts is None:
                    return
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á embeddings
            with st.spinner("üß† ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
                data_embeddings = create_embeddings(model, combined_texts)
                
                if data_embeddings is None:
                    return
            
            st.success(f"‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤! ({len(df):,} ‡πÅ‡∏ñ‡∏ß)")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            with st.expander("üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"):
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß", f"{len(df):,}")
                with col2:
                    st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Columns", len(df.columns))
                with col3:
                    st.metric("‡∏Ç‡∏ô‡∏≤‡∏î Embeddings", f"{data_embeddings.shape[1]}D")
                with col4:
                    st.metric("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå", uploaded_file.name.split('.')[-1].upper())
                
                st.subheader("üîç ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (5 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å)")
                st.dataframe(df.head(), use_container_width=True)
            
            # ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            st.markdown("### üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            query = st.text_input(
                "‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:", 
                placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...",
                key="search_query"
            )
            
            # ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                search_button = st.button("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤", use_container_width=True, type="primary")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
            if search_button and query.strip():
                with st.spinner("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤..."):
                    results = hybrid_search(
                        query, model, data_embeddings, df, combined_texts,
                        threshold=threshold,
                        cosine_weight=cosine_weight,
                        keyword_weight=keyword_weight
                    )
                
                st.markdown("---")
                st.markdown("### üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
                
                if len(results) > 0:
                    st.success(f"‚úÖ ‡∏û‡∏ö {len(results):,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á")
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
                    col1, col2, col3, col4 = st.columns(4)
                    with col1:
                        st.metric("üèÜ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", f"{results['hybrid_score'].max():.2%}")
                    with col2:
                        st.metric("üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{results['hybrid_score'].mean():.2%}")
                    with col3:
                        st.metric("ü§ñ AI Score ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{results['cosine_score'].mean():.2%}")
                    with col4:
                        st.metric("üî§ Keyword Score ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{results['keyword_score'].mean():.2%}")
                    
                    st.markdown("---")
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                    display_columns = [col for col in results.columns if col != 'combined_text']
                    results_display = results[display_columns].copy()
                    
                    # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏õ‡πá‡∏ô percentage
                    score_columns = ['hybrid_score', 'cosine_score', 'keyword_score']
                    for col in score_columns:
                        if col in results_display.columns:
                            results_display[col] = results_display[col].apply(lambda x: f"{x:.2%}")
                    
                    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö columns ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
                    score_cols = [col for col in score_columns if col in results_display.columns]
                    other_cols = [col for col in results_display.columns if col not in score_columns]
                    results_display = results_display[score_cols + other_cols]
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô dataframe ‡πÅ‡∏ö‡∏ö scroll ‡πÑ‡∏î‡πâ
                    st.dataframe(
                        results_display, 
                        use_container_width=True,
                        hide_index=True,
                        height=600
                    )
                    
                    # ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
                    with st.expander("‚ÑπÔ∏è ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"):
                        st.markdown(f"""
                        - **hybrid_score**: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏° = (AI Score √ó {cosine_weight:.1f}) + (Keyword Score √ó {keyword_weight:.1f})
                        - **cosine_score**: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å Semantic Search (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢)
                        - **keyword_score**: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å Keyword Matching (‡∏Ñ‡∏≥‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô)
                        
                        ‡∏¢‡∏¥‡πà‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á = ‡∏¢‡∏¥‡πà‡∏á‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
                        """)
                    
                    # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
                    st.markdown("### üíæ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        csv = results.to_csv(index=False, encoding='utf-8-sig')
                        st.download_button(
                            label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î CSV",
                            data=csv,
                            file_name=f"search_results_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.csv",
                            mime="text/csv",
                            use_container_width=True
                        )
                    
                    with col2:
                        from io import BytesIO
                        output = BytesIO()
                        with pd.ExcelWriter(output, engine='openpyxl') as writer:
                            results.to_excel(writer, index=False, sheet_name='Results')
                        excel_data = output.getvalue()
                        
                        st.download_button(
                            label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Excel",
                            data=excel_data,
                            file_name=f"search_results_{pd.Timestamp.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            use_container_width=True
                        )
                    
                else:
                    st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á")
                    st.info("üí° ‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
            
            elif search_button and not query.strip():
                st.warning("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
                
        except Exception as e:
            st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
    
    else:
        st.info("üëà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà Sidebar ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            <div style="background: linear-gradient(135deg, rgba(0,180,216,0.1) 0%, rgba(27,20,100,0.1) 100%); 
                        padding: 30px; border-radius: 12px; border-left: 5px solid #00B4D8;">
                <h3 style="color: #1B1464;">üìù ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</h3>
                <ol style="color: #333; line-height: 2;">
                    <li><strong>‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå</strong> (Excel ‡∏´‡∏£‡∏∑‡∏≠ CSV)</li>
                    <li><strong>‡∏õ‡∏£‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</strong> ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á AI ‡πÅ‡∏•‡∏∞ Keyword</li>
                    <li><strong>‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</strong> ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"</li>
                    <li><strong>‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå</strong> ‡∏û‡∏£‡πâ‡∏≠‡∏° scroll ‡∏î‡∏π‡∏ó‡∏∏‡∏Å‡πÅ‡∏ñ‡∏ß</li>
                </ol>
            </div>
            """, unsafe_allow_html=True)
            
            st.markdown("<br>", unsafe_allow_html=True)
            
            st.markdown("""
            <div style="background: linear-gradient(135deg, rgba(237,28,36,0.1) 0%, rgba(27,20,100,0.1) 100%); 
                        padding: 30px; border-radius: 12px; border-left: 5px solid #ED1C24;">
                <h3 style="color: #1B1464;">üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</h3>
                <table style="width: 100%; border-collapse: collapse; margin-top: 15px;">
                    <tr style="background-color: rgba(0,180,216,0.1);">
                        <th style="padding: 12px; text-align: left; color: #1B1464;">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</th>
                        <th style="padding: 12px; text-align: left; color: #1B1464;">‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô</th>
                        <th style="padding: 12px; text-align: left; color: #1B1464;">‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö</th>
                    </tr>
                    <tr>
                        <td style="padding: 10px; border-bottom: 1px solid #ddd;"><strong>AI Search</strong></td>
                        <td style="padding: 10px; border-bottom: 1px solid #ddd;">‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢</td>
                        <td style="padding: 10px; border-bottom: 1px solid #ddd;">‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô</td>
                    </tr>
                    <tr>
                        <td style="padding: 10px; border-bottom: 1px solid #ddd;"><strong>Keyword</strong></td>
                        <td style="padding: 10px; border-bottom: 1px solid #ddd;">‡∏ï‡∏£‡∏á‡∏ï‡∏±‡∏ß ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥</td>
                        <td style="padding: 10px; border-bottom: 1px solid #ddd;">‡∏Ñ‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á</td>
                    </tr>
                    <tr>
                        <td style="padding: 10px;"><strong>Hybrid</strong></td>
                        <td style="padding: 10px;">‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î</td>
                        <td style="padding: 10px;">‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ</td>
                    </tr>
                </table>
            </div>
            """, unsafe_allow_html=True)
        

if __name__ == "__main__":
    # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏•‡πÇ‡∏Å‡πâ
    # 1. ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà imgur.com ‡∏´‡∏£‡∏∑‡∏≠ image hosting service
    # 2. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å direct link ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ
    # 3. ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà 'YOUR_LOGO_URL.png' ‡∏î‡πâ‡∏ß‡∏¢ URL ‡∏à‡∏£‡∏¥‡∏á ‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ó‡∏µ‡πà 255 ‡πÅ‡∏•‡∏∞ 279
    # ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô: ‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πâ st.image('logo.png')
    
    main()
